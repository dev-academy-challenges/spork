// const APP_NAME = require('../app-name')
import APP_NAME from '../app-name.js'

/**
 * @param {Date} start
 * @param {'akl'| 'welly' | 'online'} campus
 * @param {string} dest
 * @param {import('./Algebra.js').TTemplate} when
 * @returns
 */
const compile = (start, campus, dest, when) =>
  when({
    week: (n) => n,
    mon: () => 0,
    tue: () => 1,
    wed: () => 2,
    thu: () => 3,
    fri: () => 4,

    welly: () => (/** @type {string} */ c) => c === 'welly',
    akl: () => (/** @type {string} */ c) => c === 'akl',
    online: () => (/** @type {string} */ c) => c === 'online',
    // eslint-disable-next-line no-unused-vars
    all: () => (/** @type {string} */ _) => true,
    except:
      (...cs) =>
      (/** @type {string} */ c) =>
        cs.every((f) => !f(c)),
    when: (event, matchCampus, action) => {
      if (!matchCampus(campus)) {
        return []
      }

      return [
        `// a special event
      on(${JSON.stringify(event)})
      .deploy(${action})
      .to(${JSON.stringify(dest)})
    `,
      ]
    },
    on: (week, day, matchCampus, act) => {
      if (!matchCampus(campus)) {
        return []
      }
      const target = new Date(
        +start + 24 * 60 * 60 * 1000 * ((week - 1) * 7 + day)
      )
        .toISOString()
        .slice(0, 10)

      return [
        `// week ${week}, day ${
          day + 1
        }\n  on('${target}').deploy(${act}).to(${JSON.stringify(dest)})`,
      ]
    },
    deploy: (...items) => items.map((x) => JSON.stringify(x)).join(', '),
    schedule: (...items) =>
      `// file generated by ${APP_NAME}
module.exports = on => {
  // Cohort starting ${start.toString().slice(0, 10)}
  ${[]
    .concat(
      // @ts-ignore
      ...items
    )
    .join('\n\n  ')}}\n`,
  })

export default compile
